{"ast":null,"code":"import { getApp, _getProvider, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\nimport { openDb } from 'idb';\nconst name = \"@firebase/installations\";\nconst version = \"0.5.5\";\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst PENDING_TIMEOUT_MS = 10000;\nconst PACKAGE_VERSION = `w:${version}`;\nconst INTERNAL_AUTH_VERSION = 'FIS_v2';\nconst INSTALLATIONS_API_URL = 'https://firebaseinstallations.googleapis.com/v1';\nconst TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour\n\nconst SERVICE = 'installations';\nconst SERVICE_NAME = 'Installations';\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst ERROR_DESCRIPTION_MAP = {\n  [\"missing-app-config-values\"\n  /* MISSING_APP_CONFIG_VALUES */\n  ]: 'Missing App configuration value: \"{$valueName}\"',\n  [\"not-registered\"\n  /* NOT_REGISTERED */\n  ]: 'Firebase Installation is not registered.',\n  [\"installation-not-found\"\n  /* INSTALLATION_NOT_FOUND */\n  ]: 'Firebase Installation not found.',\n  [\"request-failed\"\n  /* REQUEST_FAILED */\n  ]: '{$requestName} request failed with error \"{$serverCode} {$serverStatus}: {$serverMessage}\"',\n  [\"app-offline\"\n  /* APP_OFFLINE */\n  ]: 'Could not process request. Application offline.',\n  [\"delete-pending-registration\"\n  /* DELETE_PENDING_REGISTRATION */\n  ]: \"Can't delete installation while there is a pending registration request.\"\n};\nconst ERROR_FACTORY = new ErrorFactory(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP);\n/** Returns true if error is a FirebaseError that is based on an error from the server. */\n\nfunction isServerError(error) {\n  return error instanceof FirebaseError && error.code.includes(\"request-failed\"\n  /* REQUEST_FAILED */\n  );\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction getInstallationsEndpoint(_ref) {\n  let {\n    projectId\n  } = _ref;\n  return `${INSTALLATIONS_API_URL}/projects/${projectId}/installations`;\n}\n\nfunction extractAuthTokenInfoFromResponse(response) {\n  return {\n    token: response.token,\n    requestStatus: 2\n    /* COMPLETED */\n    ,\n    expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),\n    creationTime: Date.now()\n  };\n}\n\nasync function getErrorFromResponse(requestName, response) {\n  const responseJson = await response.json();\n  const errorData = responseJson.error;\n  return ERROR_FACTORY.create(\"request-failed\"\n  /* REQUEST_FAILED */\n  , {\n    requestName,\n    serverCode: errorData.code,\n    serverMessage: errorData.message,\n    serverStatus: errorData.status\n  });\n}\n\nfunction getHeaders(_ref2) {\n  let {\n    apiKey\n  } = _ref2;\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n\nfunction getHeadersWithAuth(appConfig, _ref3) {\n  let {\n    refreshToken\n  } = _ref3;\n  const headers = getHeaders(appConfig);\n  headers.append('Authorization', getAuthorizationHeader(refreshToken));\n  return headers;\n}\n/**\r\n * Calls the passed in fetch wrapper and returns the response.\r\n * If the returned response has a status of 5xx, re-runs the function once and\r\n * returns the response.\r\n */\n\n\nasync function retryIfServerError(fn) {\n  const result = await fn();\n\n  if (result.status >= 500 && result.status < 600) {\n    // Internal Server Error. Retry request.\n    return fn();\n  }\n\n  return result;\n}\n\nfunction getExpiresInFromResponseExpiresIn(responseExpiresIn) {\n  // This works because the server will never respond with fractions of a second.\n  return Number(responseExpiresIn.replace('s', '000'));\n}\n\nfunction getAuthorizationHeader(refreshToken) {\n  return `${INTERNAL_AUTH_VERSION} ${refreshToken}`;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nasync function createInstallationRequest(appConfig, _ref4) {\n  let {\n    fid\n  } = _ref4;\n  const endpoint = getInstallationsEndpoint(appConfig);\n  const headers = getHeaders(appConfig);\n  const body = {\n    fid,\n    authVersion: INTERNAL_AUTH_VERSION,\n    appId: appConfig.appId,\n    sdkVersion: PACKAGE_VERSION\n  };\n  const request = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n\n  if (response.ok) {\n    const responseValue = await response.json();\n    const registeredInstallationEntry = {\n      fid: responseValue.fid || fid,\n      registrationStatus: 2\n      /* COMPLETED */\n      ,\n      refreshToken: responseValue.refreshToken,\n      authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)\n    };\n    return registeredInstallationEntry;\n  } else {\n    throw await getErrorFromResponse('Create Installation', response);\n  }\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** Returns a promise that resolves after given time passes. */\n\n\nfunction sleep(ms) {\n  return new Promise(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction bufferToBase64UrlSafe(array) {\n  const b64 = btoa(String.fromCharCode(...array));\n  return b64.replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst VALID_FID_PATTERN = /^[cdef][\\w-]{21}$/;\nconst INVALID_FID = '';\n/**\r\n * Generates a new FID using random values from Web Crypto API.\r\n * Returns an empty string if FID generation fails for any reason.\r\n */\n\nfunction generateFid() {\n  try {\n    // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5\n    // bytes. our implementation generates a 17 byte array instead.\n    const fidByteArray = new Uint8Array(17);\n    const crypto = self.crypto || self.msCrypto;\n    crypto.getRandomValues(fidByteArray); // Replace the first 4 random bits with the constant FID header of 0b0111.\n\n    fidByteArray[0] = 0b01110000 + fidByteArray[0] % 0b00010000;\n    const fid = encode(fidByteArray);\n    return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;\n  } catch (_a) {\n    // FID generation errored\n    return INVALID_FID;\n  }\n}\n/** Converts a FID Uint8Array to a base64 string representation. */\n\n\nfunction encode(fidByteArray) {\n  const b64String = bufferToBase64UrlSafe(fidByteArray); // Remove the 23rd character that was added because of the extra 4 bits at the\n  // end of our 17 byte array, and the '=' padding.\n\n  return b64String.substr(0, 22);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** Returns a string key that can be used to identify the app. */\n\n\nfunction getKey(appConfig) {\n  return `${appConfig.appName}!${appConfig.appId}`;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst fidChangeCallbacks = new Map();\n/**\r\n * Calls the onIdChange callbacks with the new FID value, and broadcasts the\r\n * change to other tabs.\r\n */\n\nfunction fidChanged(appConfig, fid) {\n  const key = getKey(appConfig);\n  callFidChangeCallbacks(key, fid);\n  broadcastFidChange(key, fid);\n}\n\nfunction addCallback(appConfig, callback) {\n  // Open the broadcast channel if it's not already open,\n  // to be able to listen to change events from other tabs.\n  getBroadcastChannel();\n  const key = getKey(appConfig);\n  let callbackSet = fidChangeCallbacks.get(key);\n\n  if (!callbackSet) {\n    callbackSet = new Set();\n    fidChangeCallbacks.set(key, callbackSet);\n  }\n\n  callbackSet.add(callback);\n}\n\nfunction removeCallback(appConfig, callback) {\n  const key = getKey(appConfig);\n  const callbackSet = fidChangeCallbacks.get(key);\n\n  if (!callbackSet) {\n    return;\n  }\n\n  callbackSet.delete(callback);\n\n  if (callbackSet.size === 0) {\n    fidChangeCallbacks.delete(key);\n  } // Close broadcast channel if there are no more callbacks.\n\n\n  closeBroadcastChannel();\n}\n\nfunction callFidChangeCallbacks(key, fid) {\n  const callbacks = fidChangeCallbacks.get(key);\n\n  if (!callbacks) {\n    return;\n  }\n\n  for (const callback of callbacks) {\n    callback(fid);\n  }\n}\n\nfunction broadcastFidChange(key, fid) {\n  const channel = getBroadcastChannel();\n\n  if (channel) {\n    channel.postMessage({\n      key,\n      fid\n    });\n  }\n\n  closeBroadcastChannel();\n}\n\nlet broadcastChannel = null;\n/** Opens and returns a BroadcastChannel if it is supported by the browser. */\n\nfunction getBroadcastChannel() {\n  if (!broadcastChannel && 'BroadcastChannel' in self) {\n    broadcastChannel = new BroadcastChannel('[Firebase] FID Change');\n\n    broadcastChannel.onmessage = e => {\n      callFidChangeCallbacks(e.data.key, e.data.fid);\n    };\n  }\n\n  return broadcastChannel;\n}\n\nfunction closeBroadcastChannel() {\n  if (fidChangeCallbacks.size === 0 && broadcastChannel) {\n    broadcastChannel.close();\n    broadcastChannel = null;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst DATABASE_NAME = 'firebase-installations-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-installations-store';\nlet dbPromise = null;\n\nfunction getDbPromise() {\n  if (!dbPromise) {\n    dbPromise = openDb(DATABASE_NAME, DATABASE_VERSION, upgradeDB => {\n      // We don't use 'break' in this switch statement, the fall-through\n      // behavior is what we want, because if there are multiple versions between\n      // the old version and the current version, we want ALL the migrations\n      // that correspond to those versions to run, not only the last one.\n      // eslint-disable-next-line default-case\n      switch (upgradeDB.oldVersion) {\n        case 0:\n          upgradeDB.createObjectStore(OBJECT_STORE_NAME);\n      }\n    });\n  }\n\n  return dbPromise;\n}\n/** Assigns or overwrites the record for the given key with the given value. */\n\n\nasync function set(appConfig, value) {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const objectStore = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue = await objectStore.get(key);\n  await objectStore.put(value, key);\n  await tx.complete;\n\n  if (!oldValue || oldValue.fid !== value.fid) {\n    fidChanged(appConfig, value.fid);\n  }\n\n  return value;\n}\n/** Removes record(s) from the objectStore that match the given key. */\n\n\nasync function remove(appConfig) {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).delete(key);\n  await tx.complete;\n}\n/**\r\n * Atomically updates a record with the result of updateFn, which gets\r\n * called with the current value. If newValue is undefined, the record is\r\n * deleted instead.\r\n * @return Updated value\r\n */\n\n\nasync function update(appConfig, updateFn) {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const store = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue = await store.get(key);\n  const newValue = updateFn(oldValue);\n\n  if (newValue === undefined) {\n    await store.delete(key);\n  } else {\n    await store.put(newValue, key);\n  }\n\n  await tx.complete;\n\n  if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) {\n    fidChanged(appConfig, newValue.fid);\n  }\n\n  return newValue;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Updates and returns the InstallationEntry from the database.\r\n * Also triggers a registration request if it is necessary and possible.\r\n */\n\n\nasync function getInstallationEntry(appConfig) {\n  let registrationPromise;\n  const installationEntry = await update(appConfig, oldEntry => {\n    const installationEntry = updateOrCreateInstallationEntry(oldEntry);\n    const entryWithPromise = triggerRegistrationIfNecessary(appConfig, installationEntry);\n    registrationPromise = entryWithPromise.registrationPromise;\n    return entryWithPromise.installationEntry;\n  });\n\n  if (installationEntry.fid === INVALID_FID) {\n    // FID generation failed. Waiting for the FID from the server.\n    return {\n      installationEntry: await registrationPromise\n    };\n  }\n\n  return {\n    installationEntry,\n    registrationPromise\n  };\n}\n/**\r\n * Creates a new Installation Entry if one does not exist.\r\n * Also clears timed out pending requests.\r\n */\n\n\nfunction updateOrCreateInstallationEntry(oldEntry) {\n  const entry = oldEntry || {\n    fid: generateFid(),\n    registrationStatus: 0\n    /* NOT_STARTED */\n\n  };\n  return clearTimedOutRequest(entry);\n}\n/**\r\n * If the Firebase Installation is not registered yet, this will trigger the\r\n * registration and return an InProgressInstallationEntry.\r\n *\r\n * If registrationPromise does not exist, the installationEntry is guaranteed\r\n * to be registered.\r\n */\n\n\nfunction triggerRegistrationIfNecessary(appConfig, installationEntry) {\n  if (installationEntry.registrationStatus === 0\n  /* NOT_STARTED */\n  ) {\n    if (!navigator.onLine) {\n      // Registration required but app is offline.\n      const registrationPromiseWithError = Promise.reject(ERROR_FACTORY.create(\"app-offline\"\n      /* APP_OFFLINE */\n      ));\n      return {\n        installationEntry,\n        registrationPromise: registrationPromiseWithError\n      };\n    } // Try registering. Change status to IN_PROGRESS.\n\n\n    const inProgressEntry = {\n      fid: installationEntry.fid,\n      registrationStatus: 1\n      /* IN_PROGRESS */\n      ,\n      registrationTime: Date.now()\n    };\n    const registrationPromise = registerInstallation(appConfig, inProgressEntry);\n    return {\n      installationEntry: inProgressEntry,\n      registrationPromise\n    };\n  } else if (installationEntry.registrationStatus === 1\n  /* IN_PROGRESS */\n  ) {\n    return {\n      installationEntry,\n      registrationPromise: waitUntilFidRegistration(appConfig)\n    };\n  } else {\n    return {\n      installationEntry\n    };\n  }\n}\n/** This will be executed only once for each new Firebase Installation. */\n\n\nasync function registerInstallation(appConfig, installationEntry) {\n  try {\n    const registeredInstallationEntry = await createInstallationRequest(appConfig, installationEntry);\n    return set(appConfig, registeredInstallationEntry);\n  } catch (e) {\n    if (isServerError(e) && e.customData.serverCode === 409) {\n      // Server returned a \"FID can not be used\" error.\n      // Generate a new ID next time.\n      await remove(appConfig);\n    } else {\n      // Registration failed. Set FID as not registered.\n      await set(appConfig, {\n        fid: installationEntry.fid,\n        registrationStatus: 0\n        /* NOT_STARTED */\n\n      });\n    }\n\n    throw e;\n  }\n}\n/** Call if FID registration is pending in another request. */\n\n\nasync function waitUntilFidRegistration(appConfig) {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n  let entry = await updateInstallationRequest(appConfig);\n\n  while (entry.registrationStatus === 1\n  /* IN_PROGRESS */\n  ) {\n    // createInstallation request still in progress.\n    await sleep(100);\n    entry = await updateInstallationRequest(appConfig);\n  }\n\n  if (entry.registrationStatus === 0\n  /* NOT_STARTED */\n  ) {\n    // The request timed out or failed in a different call. Try again.\n    const {\n      installationEntry,\n      registrationPromise\n    } = await getInstallationEntry(appConfig);\n\n    if (registrationPromise) {\n      return registrationPromise;\n    } else {\n      // if there is no registrationPromise, entry is registered.\n      return installationEntry;\n    }\n  }\n\n  return entry;\n}\n/**\r\n * Called only if there is a CreateInstallation request in progress.\r\n *\r\n * Updates the InstallationEntry in the DB based on the status of the\r\n * CreateInstallation request.\r\n *\r\n * Returns the updated InstallationEntry.\r\n */\n\n\nfunction updateInstallationRequest(appConfig) {\n  return update(appConfig, oldEntry => {\n    if (!oldEntry) {\n      throw ERROR_FACTORY.create(\"installation-not-found\"\n      /* INSTALLATION_NOT_FOUND */\n      );\n    }\n\n    return clearTimedOutRequest(oldEntry);\n  });\n}\n\nfunction clearTimedOutRequest(entry) {\n  if (hasInstallationRequestTimedOut(entry)) {\n    return {\n      fid: entry.fid,\n      registrationStatus: 0\n      /* NOT_STARTED */\n\n    };\n  }\n\n  return entry;\n}\n\nfunction hasInstallationRequestTimedOut(installationEntry) {\n  return installationEntry.registrationStatus === 1\n  /* IN_PROGRESS */\n  && installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now();\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nasync function generateAuthTokenRequest(_ref5, installationEntry) {\n  let {\n    appConfig,\n    platformLoggerProvider\n  } = _ref5;\n  const endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);\n  const headers = getHeadersWithAuth(appConfig, installationEntry); // If platform logger exists, add the platform info string to the header.\n\n  const platformLogger = platformLoggerProvider.getImmediate({\n    optional: true\n  });\n\n  if (platformLogger) {\n    headers.append('x-firebase-client', platformLogger.getPlatformInfoString());\n  }\n\n  const body = {\n    installation: {\n      sdkVersion: PACKAGE_VERSION\n    }\n  };\n  const request = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n\n  if (response.ok) {\n    const responseValue = await response.json();\n    const completedAuthToken = extractAuthTokenInfoFromResponse(responseValue);\n    return completedAuthToken;\n  } else {\n    throw await getErrorFromResponse('Generate Auth Token', response);\n  }\n}\n\nfunction getGenerateAuthTokenEndpoint(appConfig, _ref6) {\n  let {\n    fid\n  } = _ref6;\n  return `${getInstallationsEndpoint(appConfig)}/${fid}/authTokens:generate`;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns a valid authentication token for the installation. Generates a new\r\n * token if one doesn't exist, is expired or about to expire.\r\n *\r\n * Should only be called if the Firebase Installation is registered.\r\n */\n\n\nasync function refreshAuthToken(installations) {\n  let forceRefresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  let tokenPromise;\n  const entry = await update(installations.appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(\"not-registered\"\n      /* NOT_REGISTERED */\n      );\n    }\n\n    const oldAuthToken = oldEntry.authToken;\n\n    if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {\n      // There is a valid token in the DB.\n      return oldEntry;\n    } else if (oldAuthToken.requestStatus === 1\n    /* IN_PROGRESS */\n    ) {\n      // There already is a token request in progress.\n      tokenPromise = waitUntilAuthTokenRequest(installations, forceRefresh);\n      return oldEntry;\n    } else {\n      // No token or token expired.\n      if (!navigator.onLine) {\n        throw ERROR_FACTORY.create(\"app-offline\"\n        /* APP_OFFLINE */\n        );\n      }\n\n      const inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);\n      tokenPromise = fetchAuthTokenFromServer(installations, inProgressEntry);\n      return inProgressEntry;\n    }\n  });\n  const authToken = tokenPromise ? await tokenPromise : entry.authToken;\n  return authToken;\n}\n/**\r\n * Call only if FID is registered and Auth Token request is in progress.\r\n *\r\n * Waits until the current pending request finishes. If the request times out,\r\n * tries once in this thread as well.\r\n */\n\n\nasync function waitUntilAuthTokenRequest(installations, forceRefresh) {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n  let entry = await updateAuthTokenRequest(installations.appConfig);\n\n  while (entry.authToken.requestStatus === 1\n  /* IN_PROGRESS */\n  ) {\n    // generateAuthToken still in progress.\n    await sleep(100);\n    entry = await updateAuthTokenRequest(installations.appConfig);\n  }\n\n  const authToken = entry.authToken;\n\n  if (authToken.requestStatus === 0\n  /* NOT_STARTED */\n  ) {\n    // The request timed out or failed in a different call. Try again.\n    return refreshAuthToken(installations, forceRefresh);\n  } else {\n    return authToken;\n  }\n}\n/**\r\n * Called only if there is a GenerateAuthToken request in progress.\r\n *\r\n * Updates the InstallationEntry in the DB based on the status of the\r\n * GenerateAuthToken request.\r\n *\r\n * Returns the updated InstallationEntry.\r\n */\n\n\nfunction updateAuthTokenRequest(appConfig) {\n  return update(appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(\"not-registered\"\n      /* NOT_REGISTERED */\n      );\n    }\n\n    const oldAuthToken = oldEntry.authToken;\n\n    if (hasAuthTokenRequestTimedOut(oldAuthToken)) {\n      return Object.assign(Object.assign({}, oldEntry), {\n        authToken: {\n          requestStatus: 0\n          /* NOT_STARTED */\n\n        }\n      });\n    }\n\n    return oldEntry;\n  });\n}\n\nasync function fetchAuthTokenFromServer(installations, installationEntry) {\n  try {\n    const authToken = await generateAuthTokenRequest(installations, installationEntry);\n    const updatedInstallationEntry = Object.assign(Object.assign({}, installationEntry), {\n      authToken\n    });\n    await set(installations.appConfig, updatedInstallationEntry);\n    return authToken;\n  } catch (e) {\n    if (isServerError(e) && (e.customData.serverCode === 401 || e.customData.serverCode === 404)) {\n      // Server returned a \"FID not found\" or a \"Invalid authentication\" error.\n      // Generate a new ID next time.\n      await remove(installations.appConfig);\n    } else {\n      const updatedInstallationEntry = Object.assign(Object.assign({}, installationEntry), {\n        authToken: {\n          requestStatus: 0\n          /* NOT_STARTED */\n\n        }\n      });\n      await set(installations.appConfig, updatedInstallationEntry);\n    }\n\n    throw e;\n  }\n}\n\nfunction isEntryRegistered(installationEntry) {\n  return installationEntry !== undefined && installationEntry.registrationStatus === 2\n  /* COMPLETED */\n  ;\n}\n\nfunction isAuthTokenValid(authToken) {\n  return authToken.requestStatus === 2\n  /* COMPLETED */\n  && !isAuthTokenExpired(authToken);\n}\n\nfunction isAuthTokenExpired(authToken) {\n  const now = Date.now();\n  return now < authToken.creationTime || authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER;\n}\n/** Returns an updated InstallationEntry with an InProgressAuthToken. */\n\n\nfunction makeAuthTokenRequestInProgressEntry(oldEntry) {\n  const inProgressAuthToken = {\n    requestStatus: 1\n    /* IN_PROGRESS */\n    ,\n    requestTime: Date.now()\n  };\n  return Object.assign(Object.assign({}, oldEntry), {\n    authToken: inProgressAuthToken\n  });\n}\n\nfunction hasAuthTokenRequestTimedOut(authToken) {\n  return authToken.requestStatus === 1\n  /* IN_PROGRESS */\n  && authToken.requestTime + PENDING_TIMEOUT_MS < Date.now();\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Creates a Firebase Installation if there isn't one for the app and\r\n * returns the Installation ID.\r\n * @param installations - The `Installations` instance.\r\n *\r\n * @public\r\n */\n\n\nasync function getId(installations) {\n  const installationsImpl = installations;\n  const {\n    installationEntry,\n    registrationPromise\n  } = await getInstallationEntry(installationsImpl.appConfig);\n\n  if (registrationPromise) {\n    registrationPromise.catch(console.error);\n  } else {\n    // If the installation is already registered, update the authentication\n    // token if needed.\n    refreshAuthToken(installationsImpl).catch(console.error);\n  }\n\n  return installationEntry.fid;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns a Firebase Installations auth token, identifying the current\r\n * Firebase Installation.\r\n * @param installations - The `Installations` instance.\r\n * @param forceRefresh - Force refresh regardless of token expiration.\r\n *\r\n * @public\r\n */\n\n\nasync function getToken(installations) {\n  let forceRefresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  const installationsImpl = installations;\n  await completeInstallationRegistration(installationsImpl.appConfig); // At this point we either have a Registered Installation in the DB, or we've\n  // already thrown an error.\n\n  const authToken = await refreshAuthToken(installationsImpl, forceRefresh);\n  return authToken.token;\n}\n\nasync function completeInstallationRegistration(appConfig) {\n  const {\n    registrationPromise\n  } = await getInstallationEntry(appConfig);\n\n  if (registrationPromise) {\n    // A createInstallation request is in progress. Wait until it finishes.\n    await registrationPromise;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nasync function deleteInstallationRequest(appConfig, installationEntry) {\n  const endpoint = getDeleteEndpoint(appConfig, installationEntry);\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n  const request = {\n    method: 'DELETE',\n    headers\n  };\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n\n  if (!response.ok) {\n    throw await getErrorFromResponse('Delete Installation', response);\n  }\n}\n\nfunction getDeleteEndpoint(appConfig, _ref7) {\n  let {\n    fid\n  } = _ref7;\n  return `${getInstallationsEndpoint(appConfig)}/${fid}`;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Deletes the Firebase Installation and all associated data.\r\n * @param installations - The `Installations` instance.\r\n *\r\n * @public\r\n */\n\n\nasync function deleteInstallations(installations) {\n  const {\n    appConfig\n  } = installations;\n  const entry = await update(appConfig, oldEntry => {\n    if (oldEntry && oldEntry.registrationStatus === 0\n    /* NOT_STARTED */\n    ) {\n      // Delete the unregistered entry without sending a deleteInstallation request.\n      return undefined;\n    }\n\n    return oldEntry;\n  });\n\n  if (entry) {\n    if (entry.registrationStatus === 1\n    /* IN_PROGRESS */\n    ) {\n      // Can't delete while trying to register.\n      throw ERROR_FACTORY.create(\"delete-pending-registration\"\n      /* DELETE_PENDING_REGISTRATION */\n      );\n    } else if (entry.registrationStatus === 2\n    /* COMPLETED */\n    ) {\n      if (!navigator.onLine) {\n        throw ERROR_FACTORY.create(\"app-offline\"\n        /* APP_OFFLINE */\n        );\n      } else {\n        await deleteInstallationRequest(appConfig, entry);\n        await remove(appConfig);\n      }\n    }\n  }\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Sets a new callback that will get called when Installation ID changes.\r\n * Returns an unsubscribe function that will remove the callback when called.\r\n * @param installations - The `Installations` instance.\r\n * @param callback - The callback function that is invoked when FID changes.\r\n * @returns A function that can be called to unsubscribe.\r\n *\r\n * @public\r\n */\n\n\nfunction onIdChange(installations, callback) {\n  const {\n    appConfig\n  } = installations;\n  addCallback(appConfig, callback);\n  return () => {\n    removeCallback(appConfig, callback);\n  };\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns an instance of {@link Installations} associated with the given\r\n * {@link @firebase/app#FirebaseApp} instance.\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance.\r\n *\r\n * @public\r\n */\n\n\nfunction getInstallations() {\n  let app = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getApp();\n\n  const installationsImpl = _getProvider(app, 'installations').getImmediate();\n\n  return installationsImpl;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction extractAppConfig(app) {\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration');\n  }\n\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  } // Required app config keys\n\n\n  const configKeys = ['projectId', 'apiKey', 'appId'];\n\n  for (const keyName of configKeys) {\n    if (!app.options[keyName]) {\n      throw getMissingValueError(keyName);\n    }\n  }\n\n  return {\n    appName: app.name,\n    projectId: app.options.projectId,\n    apiKey: app.options.apiKey,\n    appId: app.options.appId\n  };\n}\n\nfunction getMissingValueError(valueName) {\n  return ERROR_FACTORY.create(\"missing-app-config-values\"\n  /* MISSING_APP_CONFIG_VALUES */\n  , {\n    valueName\n  });\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst INSTALLATIONS_NAME = 'installations';\nconst INSTALLATIONS_NAME_INTERNAL = 'installations-internal';\n\nconst publicFactory = container => {\n  const app = container.getProvider('app').getImmediate(); // Throws if app isn't configured properly.\n\n  const appConfig = extractAppConfig(app);\n\n  const platformLoggerProvider = _getProvider(app, 'platform-logger');\n\n  const installationsImpl = {\n    app,\n    appConfig,\n    platformLoggerProvider,\n    _delete: () => Promise.resolve()\n  };\n  return installationsImpl;\n};\n\nconst internalFactory = container => {\n  const app = container.getProvider('app').getImmediate(); // Internal FIS instance relies on public FIS instance.\n\n  const installations = _getProvider(app, INSTALLATIONS_NAME).getImmediate();\n\n  const installationsInternal = {\n    getId: () => getId(installations),\n    getToken: forceRefresh => getToken(installations, forceRefresh)\n  };\n  return installationsInternal;\n};\n\nfunction registerInstallations() {\n  _registerComponent(new Component(INSTALLATIONS_NAME, publicFactory, \"PUBLIC\"\n  /* PUBLIC */\n  ));\n\n  _registerComponent(new Component(INSTALLATIONS_NAME_INTERNAL, internalFactory, \"PRIVATE\"\n  /* PRIVATE */\n  ));\n}\n/**\r\n * Firebase Installations\r\n *\r\n * @packageDocumentation\r\n */\n\n\nregisterInstallations();\nregisterVersion(name, version); // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n\nregisterVersion(name, version, 'esm2017');\nexport { deleteInstallations, getId, getInstallations, getToken, onIdChange };","map":{"version":3,"mappings":"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","names":["PENDING_TIMEOUT_MS","PACKAGE_VERSION","version","INTERNAL_AUTH_VERSION","INSTALLATIONS_API_URL","TOKEN_EXPIRATION_BUFFER","SERVICE","SERVICE_NAME","ERROR_DESCRIPTION_MAP","ERROR_FACTORY","ErrorFactory","isServerError","error","FirebaseError","code","includes","getInstallationsEndpoint","projectId","extractAuthTokenInfoFromResponse","response","token","requestStatus","expiresIn","getExpiresInFromResponseExpiresIn","creationTime","Date","now","getErrorFromResponse","requestName","responseJson","json","errorData","create","serverCode","serverMessage","message","serverStatus","status","getHeaders","apiKey","Headers","Accept","getHeadersWithAuth","appConfig","refreshToken","headers","append","getAuthorizationHeader","retryIfServerError","fn","result","responseExpiresIn","Number","replace","createInstallationRequest","fid","endpoint","body","authVersion","appId","sdkVersion","request","method","JSON","stringify","fetch","ok","responseValue","registeredInstallationEntry","registrationStatus","authToken","sleep","ms","Promise","resolve","setTimeout","bufferToBase64UrlSafe","array","b64","btoa","String","fromCharCode","VALID_FID_PATTERN","INVALID_FID","generateFid","fidByteArray","Uint8Array","crypto","self","msCrypto","getRandomValues","encode","test","b64String","substr","getKey","appName","fidChangeCallbacks","Map","fidChanged","key","callFidChangeCallbacks","broadcastFidChange","addCallback","callback","getBroadcastChannel","callbackSet","get","Set","set","add","removeCallback","delete","size","closeBroadcastChannel","callbacks","channel","postMessage","broadcastChannel","BroadcastChannel","onmessage","e","data","close","DATABASE_NAME","DATABASE_VERSION","OBJECT_STORE_NAME","dbPromise","getDbPromise","openDb","upgradeDB","oldVersion","createObjectStore","value","db","tx","transaction","objectStore","oldValue","put","complete","remove","update","updateFn","store","newValue","undefined","getInstallationEntry","registrationPromise","installationEntry","oldEntry","updateOrCreateInstallationEntry","entryWithPromise","triggerRegistrationIfNecessary","entry","clearTimedOutRequest","navigator","onLine","registrationPromiseWithError","reject","inProgressEntry","registrationTime","registerInstallation","waitUntilFidRegistration","customData","updateInstallationRequest","hasInstallationRequestTimedOut","generateAuthTokenRequest","platformLoggerProvider","getGenerateAuthTokenEndpoint","platformLogger","getImmediate","optional","getPlatformInfoString","installation","completedAuthToken","refreshAuthToken","installations","forceRefresh","tokenPromise","isEntryRegistered","oldAuthToken","isAuthTokenValid","waitUntilAuthTokenRequest","makeAuthTokenRequestInProgressEntry","fetchAuthTokenFromServer","updateAuthTokenRequest","hasAuthTokenRequestTimedOut","updatedInstallationEntry","isAuthTokenExpired","inProgressAuthToken","requestTime","getId","installationsImpl","catch","console","getToken","completeInstallationRegistration","deleteInstallationRequest","getDeleteEndpoint","deleteInstallations","onIdChange","getInstallations","app","getApp","_getProvider","extractAppConfig","options","getMissingValueError","name","configKeys","keyName","valueName","INSTALLATIONS_NAME","INSTALLATIONS_NAME_INTERNAL","publicFactory","container","getProvider","_delete","internalFactory","installationsInternal","registerInstallations","_registerComponent","Component","registerVersion"],"sources":["/Users/ayushjain/Desktop/turntable/frontend/node_modules/@firebase/installations/src/util/constants.ts","/Users/ayushjain/Desktop/turntable/frontend/node_modules/@firebase/installations/src/util/errors.ts","/Users/ayushjain/Desktop/turntable/frontend/node_modules/@firebase/installations/src/functions/common.ts","/Users/ayushjain/Desktop/turntable/frontend/node_modules/@firebase/installations/src/functions/create-installation-request.ts","/Users/ayushjain/Desktop/turntable/frontend/node_modules/@firebase/installations/src/util/sleep.ts","/Users/ayushjain/Desktop/turntable/frontend/node_modules/@firebase/installations/src/helpers/buffer-to-base64-url-safe.ts","/Users/ayushjain/Desktop/turntable/frontend/node_modules/@firebase/installations/src/helpers/generate-fid.ts","/Users/ayushjain/Desktop/turntable/frontend/node_modules/@firebase/installations/src/util/get-key.ts","/Users/ayushjain/Desktop/turntable/frontend/node_modules/@firebase/installations/src/helpers/fid-changed.ts","/Users/ayushjain/Desktop/turntable/frontend/node_modules/@firebase/installations/src/helpers/idb-manager.ts","/Users/ayushjain/Desktop/turntable/frontend/node_modules/@firebase/installations/src/helpers/get-installation-entry.ts","/Users/ayushjain/Desktop/turntable/frontend/node_modules/@firebase/installations/src/functions/generate-auth-token-request.ts","/Users/ayushjain/Desktop/turntable/frontend/node_modules/@firebase/installations/src/helpers/refresh-auth-token.ts","/Users/ayushjain/Desktop/turntable/frontend/node_modules/@firebase/installations/src/api/get-id.ts","/Users/ayushjain/Desktop/turntable/frontend/node_modules/@firebase/installations/src/api/get-token.ts","/Users/ayushjain/Desktop/turntable/frontend/node_modules/@firebase/installations/src/functions/delete-installation-request.ts","/Users/ayushjain/Desktop/turntable/frontend/node_modules/@firebase/installations/src/api/delete-installations.ts","/Users/ayushjain/Desktop/turntable/frontend/node_modules/@firebase/installations/src/api/on-id-change.ts","/Users/ayushjain/Desktop/turntable/frontend/node_modules/@firebase/installations/src/api/get-installations.ts","/Users/ayushjain/Desktop/turntable/frontend/node_modules/@firebase/installations/src/helpers/extract-app-config.ts","/Users/ayushjain/Desktop/turntable/frontend/node_modules/@firebase/installations/src/functions/config.ts","/Users/ayushjain/Desktop/turntable/frontend/node_modules/@firebase/installations/src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { version } from '../../package.json';\n\nexport const PENDING_TIMEOUT_MS = 10000;\n\nexport const PACKAGE_VERSION = `w:${version}`;\nexport const INTERNAL_AUTH_VERSION = 'FIS_v2';\n\nexport const INSTALLATIONS_API_URL =\n  'https://firebaseinstallations.googleapis.com/v1';\n\nexport const TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour\n\nexport const SERVICE = 'installations';\nexport const SERVICE_NAME = 'Installations';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\nimport { SERVICE, SERVICE_NAME } from './constants';\n\nexport const enum ErrorCode {\n  MISSING_APP_CONFIG_VALUES = 'missing-app-config-values',\n  NOT_REGISTERED = 'not-registered',\n  INSTALLATION_NOT_FOUND = 'installation-not-found',\n  REQUEST_FAILED = 'request-failed',\n  APP_OFFLINE = 'app-offline',\n  DELETE_PENDING_REGISTRATION = 'delete-pending-registration'\n}\n\nconst ERROR_DESCRIPTION_MAP: { readonly [key in ErrorCode]: string } = {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]:\n    'Missing App configuration value: \"{$valueName}\"',\n  [ErrorCode.NOT_REGISTERED]: 'Firebase Installation is not registered.',\n  [ErrorCode.INSTALLATION_NOT_FOUND]: 'Firebase Installation not found.',\n  [ErrorCode.REQUEST_FAILED]:\n    '{$requestName} request failed with error \"{$serverCode} {$serverStatus}: {$serverMessage}\"',\n  [ErrorCode.APP_OFFLINE]: 'Could not process request. Application offline.',\n  [ErrorCode.DELETE_PENDING_REGISTRATION]:\n    \"Can't delete installation while there is a pending registration request.\"\n};\n\ninterface ErrorParams {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]: {\n    valueName: string;\n  };\n  [ErrorCode.REQUEST_FAILED]: {\n    requestName: string;\n    [index: string]: string | number; // to make Typescript 3.8 happy\n  } & ServerErrorData;\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  SERVICE,\n  SERVICE_NAME,\n  ERROR_DESCRIPTION_MAP\n);\n\nexport interface ServerErrorData {\n  serverCode: number;\n  serverMessage: string;\n  serverStatus: string;\n}\n\nexport type ServerError = FirebaseError & { customData: ServerErrorData };\n\n/** Returns true if error is a FirebaseError that is based on an error from the server. */\nexport function isServerError(error: unknown): error is ServerError {\n  return (\n    error instanceof FirebaseError &&\n    error.code.includes(ErrorCode.REQUEST_FAILED)\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport {\n  CompletedAuthToken,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport {\n  INSTALLATIONS_API_URL,\n  INTERNAL_AUTH_VERSION\n} from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { AppConfig } from '../interfaces/installation-impl';\n\nexport function getInstallationsEndpoint({ projectId }: AppConfig): string {\n  return `${INSTALLATIONS_API_URL}/projects/${projectId}/installations`;\n}\n\nexport function extractAuthTokenInfoFromResponse(\n  response: GenerateAuthTokenResponse\n): CompletedAuthToken {\n  return {\n    token: response.token,\n    requestStatus: RequestStatus.COMPLETED,\n    expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),\n    creationTime: Date.now()\n  };\n}\n\nexport async function getErrorFromResponse(\n  requestName: string,\n  response: Response\n): Promise<FirebaseError> {\n  const responseJson: ErrorResponse = await response.json();\n  const errorData = responseJson.error;\n  return ERROR_FACTORY.create(ErrorCode.REQUEST_FAILED, {\n    requestName,\n    serverCode: errorData.code,\n    serverMessage: errorData.message,\n    serverStatus: errorData.status\n  });\n}\n\nexport function getHeaders({ apiKey }: AppConfig): Headers {\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n\nexport function getHeadersWithAuth(\n  appConfig: AppConfig,\n  { refreshToken }: RegisteredInstallationEntry\n): Headers {\n  const headers = getHeaders(appConfig);\n  headers.append('Authorization', getAuthorizationHeader(refreshToken));\n  return headers;\n}\n\nexport interface ErrorResponse {\n  error: {\n    code: number;\n    message: string;\n    status: string;\n  };\n}\n\n/**\n * Calls the passed in fetch wrapper and returns the response.\n * If the returned response has a status of 5xx, re-runs the function once and\n * returns the response.\n */\nexport async function retryIfServerError(\n  fn: () => Promise<Response>\n): Promise<Response> {\n  const result = await fn();\n\n  if (result.status >= 500 && result.status < 600) {\n    // Internal Server Error. Retry request.\n    return fn();\n  }\n\n  return result;\n}\n\nfunction getExpiresInFromResponseExpiresIn(responseExpiresIn: string): number {\n  // This works because the server will never respond with fractions of a second.\n  return Number(responseExpiresIn.replace('s', '000'));\n}\n\nfunction getAuthorizationHeader(refreshToken: string): string {\n  return `${INTERNAL_AUTH_VERSION} ${refreshToken}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CreateInstallationResponse } from '../interfaces/api-response';\nimport {\n  InProgressInstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { INTERNAL_AUTH_VERSION, PACKAGE_VERSION } from '../util/constants';\nimport {\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeaders,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\nimport { AppConfig } from '../interfaces/installation-impl';\n\nexport async function createInstallationRequest(\n  appConfig: AppConfig,\n  { fid }: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> {\n  const endpoint = getInstallationsEndpoint(appConfig);\n\n  const headers = getHeaders(appConfig);\n  const body = {\n    fid,\n    authVersion: INTERNAL_AUTH_VERSION,\n    appId: appConfig.appId,\n    sdkVersion: PACKAGE_VERSION\n  };\n\n  const request: RequestInit = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) {\n    const responseValue: CreateInstallationResponse = await response.json();\n    const registeredInstallationEntry: RegisteredInstallationEntry = {\n      fid: responseValue.fid || fid,\n      registrationStatus: RequestStatus.COMPLETED,\n      refreshToken: responseValue.refreshToken,\n      authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)\n    };\n    return registeredInstallationEntry;\n  } else {\n    throw await getErrorFromResponse('Create Installation', response);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Returns a promise that resolves after given time passes. */\nexport function sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function bufferToBase64UrlSafe(array: Uint8Array): string {\n  const b64 = btoa(String.fromCharCode(...array));\n  return b64.replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bufferToBase64UrlSafe } from './buffer-to-base64-url-safe';\n\nexport const VALID_FID_PATTERN = /^[cdef][\\w-]{21}$/;\nexport const INVALID_FID = '';\n\n/**\n * Generates a new FID using random values from Web Crypto API.\n * Returns an empty string if FID generation fails for any reason.\n */\nexport function generateFid(): string {\n  try {\n    // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5\n    // bytes. our implementation generates a 17 byte array instead.\n    const fidByteArray = new Uint8Array(17);\n    const crypto =\n      self.crypto || (self as unknown as { msCrypto: Crypto }).msCrypto;\n    crypto.getRandomValues(fidByteArray);\n\n    // Replace the first 4 random bits with the constant FID header of 0b0111.\n    fidByteArray[0] = 0b01110000 + (fidByteArray[0] % 0b00010000);\n\n    const fid = encode(fidByteArray);\n\n    return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;\n  } catch {\n    // FID generation errored\n    return INVALID_FID;\n  }\n}\n\n/** Converts a FID Uint8Array to a base64 string representation. */\nfunction encode(fidByteArray: Uint8Array): string {\n  const b64String = bufferToBase64UrlSafe(fidByteArray);\n\n  // Remove the 23rd character that was added because of the extra 4 bits at the\n  // end of our 17 byte array, and the '=' padding.\n  return b64String.substr(0, 22);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfig } from '../interfaces/installation-impl';\n\n/** Returns a string key that can be used to identify the app. */\nexport function getKey(appConfig: AppConfig): string {\n  return `${appConfig.appName}!${appConfig.appId}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getKey } from '../util/get-key';\nimport { AppConfig } from '../interfaces/installation-impl';\nimport { IdChangeCallbackFn } from '../api';\n\nconst fidChangeCallbacks: Map<string, Set<IdChangeCallbackFn>> = new Map();\n\n/**\n * Calls the onIdChange callbacks with the new FID value, and broadcasts the\n * change to other tabs.\n */\nexport function fidChanged(appConfig: AppConfig, fid: string): void {\n  const key = getKey(appConfig);\n\n  callFidChangeCallbacks(key, fid);\n  broadcastFidChange(key, fid);\n}\n\nexport function addCallback(\n  appConfig: AppConfig,\n  callback: IdChangeCallbackFn\n): void {\n  // Open the broadcast channel if it's not already open,\n  // to be able to listen to change events from other tabs.\n  getBroadcastChannel();\n\n  const key = getKey(appConfig);\n\n  let callbackSet = fidChangeCallbacks.get(key);\n  if (!callbackSet) {\n    callbackSet = new Set();\n    fidChangeCallbacks.set(key, callbackSet);\n  }\n  callbackSet.add(callback);\n}\n\nexport function removeCallback(\n  appConfig: AppConfig,\n  callback: IdChangeCallbackFn\n): void {\n  const key = getKey(appConfig);\n\n  const callbackSet = fidChangeCallbacks.get(key);\n\n  if (!callbackSet) {\n    return;\n  }\n\n  callbackSet.delete(callback);\n  if (callbackSet.size === 0) {\n    fidChangeCallbacks.delete(key);\n  }\n\n  // Close broadcast channel if there are no more callbacks.\n  closeBroadcastChannel();\n}\n\nfunction callFidChangeCallbacks(key: string, fid: string): void {\n  const callbacks = fidChangeCallbacks.get(key);\n  if (!callbacks) {\n    return;\n  }\n\n  for (const callback of callbacks) {\n    callback(fid);\n  }\n}\n\nfunction broadcastFidChange(key: string, fid: string): void {\n  const channel = getBroadcastChannel();\n  if (channel) {\n    channel.postMessage({ key, fid });\n  }\n  closeBroadcastChannel();\n}\n\nlet broadcastChannel: BroadcastChannel | null = null;\n/** Opens and returns a BroadcastChannel if it is supported by the browser. */\nfunction getBroadcastChannel(): BroadcastChannel | null {\n  if (!broadcastChannel && 'BroadcastChannel' in self) {\n    broadcastChannel = new BroadcastChannel('[Firebase] FID Change');\n    broadcastChannel.onmessage = e => {\n      callFidChangeCallbacks(e.data.key, e.data.fid);\n    };\n  }\n  return broadcastChannel;\n}\n\nfunction closeBroadcastChannel(): void {\n  if (fidChangeCallbacks.size === 0 && broadcastChannel) {\n    broadcastChannel.close();\n    broadcastChannel = null;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DB, openDb } from 'idb';\nimport { AppConfig } from '../interfaces/installation-impl';\nimport { InstallationEntry } from '../interfaces/installation-entry';\nimport { getKey } from '../util/get-key';\nimport { fidChanged } from './fid-changed';\n\nconst DATABASE_NAME = 'firebase-installations-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-installations-store';\n\nlet dbPromise: Promise<DB> | null = null;\nfunction getDbPromise(): Promise<DB> {\n  if (!dbPromise) {\n    dbPromise = openDb(DATABASE_NAME, DATABASE_VERSION, upgradeDB => {\n      // We don't use 'break' in this switch statement, the fall-through\n      // behavior is what we want, because if there are multiple versions between\n      // the old version and the current version, we want ALL the migrations\n      // that correspond to those versions to run, not only the last one.\n      // eslint-disable-next-line default-case\n      switch (upgradeDB.oldVersion) {\n        case 0:\n          upgradeDB.createObjectStore(OBJECT_STORE_NAME);\n      }\n    });\n  }\n  return dbPromise;\n}\n\n/** Gets record(s) from the objectStore that match the given key. */\nexport async function get(\n  appConfig: AppConfig\n): Promise<InstallationEntry | undefined> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  return db\n    .transaction(OBJECT_STORE_NAME)\n    .objectStore(OBJECT_STORE_NAME)\n    .get(key);\n}\n\n/** Assigns or overwrites the record for the given key with the given value. */\nexport async function set<ValueType extends InstallationEntry>(\n  appConfig: AppConfig,\n  value: ValueType\n): Promise<ValueType> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const objectStore = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue = await objectStore.get(key);\n  await objectStore.put(value, key);\n  await tx.complete;\n\n  if (!oldValue || oldValue.fid !== value.fid) {\n    fidChanged(appConfig, value.fid);\n  }\n\n  return value;\n}\n\n/** Removes record(s) from the objectStore that match the given key. */\nexport async function remove(appConfig: AppConfig): Promise<void> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).delete(key);\n  await tx.complete;\n}\n\n/**\n * Atomically updates a record with the result of updateFn, which gets\n * called with the current value. If newValue is undefined, the record is\n * deleted instead.\n * @return Updated value\n */\nexport async function update<ValueType extends InstallationEntry | undefined>(\n  appConfig: AppConfig,\n  updateFn: (previousValue: InstallationEntry | undefined) => ValueType\n): Promise<ValueType> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const store = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue: InstallationEntry | undefined = await store.get(key);\n  const newValue = updateFn(oldValue);\n\n  if (newValue === undefined) {\n    await store.delete(key);\n  } else {\n    await store.put(newValue, key);\n  }\n  await tx.complete;\n\n  if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) {\n    fidChanged(appConfig, newValue.fid);\n  }\n\n  return newValue;\n}\n\nexport async function clear(): Promise<void> {\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).clear();\n  await tx.complete;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createInstallationRequest } from '../functions/create-installation-request';\nimport { AppConfig } from '../interfaces/installation-impl';\nimport {\n  InProgressInstallationEntry,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { PENDING_TIMEOUT_MS } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport { sleep } from '../util/sleep';\nimport { generateFid, INVALID_FID } from './generate-fid';\nimport { remove, set, update } from './idb-manager';\n\nexport interface InstallationEntryWithRegistrationPromise {\n  installationEntry: InstallationEntry;\n  /** Exist iff the installationEntry is not registered. */\n  registrationPromise?: Promise<RegisteredInstallationEntry>;\n}\n\n/**\n * Updates and returns the InstallationEntry from the database.\n * Also triggers a registration request if it is necessary and possible.\n */\nexport async function getInstallationEntry(\n  appConfig: AppConfig\n): Promise<InstallationEntryWithRegistrationPromise> {\n  let registrationPromise: Promise<RegisteredInstallationEntry> | undefined;\n\n  const installationEntry = await update(appConfig, oldEntry => {\n    const installationEntry = updateOrCreateInstallationEntry(oldEntry);\n    const entryWithPromise = triggerRegistrationIfNecessary(\n      appConfig,\n      installationEntry\n    );\n    registrationPromise = entryWithPromise.registrationPromise;\n    return entryWithPromise.installationEntry;\n  });\n\n  if (installationEntry.fid === INVALID_FID) {\n    // FID generation failed. Waiting for the FID from the server.\n    return { installationEntry: await registrationPromise! };\n  }\n\n  return {\n    installationEntry,\n    registrationPromise\n  };\n}\n\n/**\n * Creates a new Installation Entry if one does not exist.\n * Also clears timed out pending requests.\n */\nfunction updateOrCreateInstallationEntry(\n  oldEntry: InstallationEntry | undefined\n): InstallationEntry {\n  const entry: InstallationEntry = oldEntry || {\n    fid: generateFid(),\n    registrationStatus: RequestStatus.NOT_STARTED\n  };\n\n  return clearTimedOutRequest(entry);\n}\n\n/**\n * If the Firebase Installation is not registered yet, this will trigger the\n * registration and return an InProgressInstallationEntry.\n *\n * If registrationPromise does not exist, the installationEntry is guaranteed\n * to be registered.\n */\nfunction triggerRegistrationIfNecessary(\n  appConfig: AppConfig,\n  installationEntry: InstallationEntry\n): InstallationEntryWithRegistrationPromise {\n  if (installationEntry.registrationStatus === RequestStatus.NOT_STARTED) {\n    if (!navigator.onLine) {\n      // Registration required but app is offline.\n      const registrationPromiseWithError = Promise.reject(\n        ERROR_FACTORY.create(ErrorCode.APP_OFFLINE)\n      );\n      return {\n        installationEntry,\n        registrationPromise: registrationPromiseWithError\n      };\n    }\n\n    // Try registering. Change status to IN_PROGRESS.\n    const inProgressEntry: InProgressInstallationEntry = {\n      fid: installationEntry.fid,\n      registrationStatus: RequestStatus.IN_PROGRESS,\n      registrationTime: Date.now()\n    };\n    const registrationPromise = registerInstallation(\n      appConfig,\n      inProgressEntry\n    );\n    return { installationEntry: inProgressEntry, registrationPromise };\n  } else if (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS\n  ) {\n    return {\n      installationEntry,\n      registrationPromise: waitUntilFidRegistration(appConfig)\n    };\n  } else {\n    return { installationEntry };\n  }\n}\n\n/** This will be executed only once for each new Firebase Installation. */\nasync function registerInstallation(\n  appConfig: AppConfig,\n  installationEntry: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> {\n  try {\n    const registeredInstallationEntry = await createInstallationRequest(\n      appConfig,\n      installationEntry\n    );\n    return set(appConfig, registeredInstallationEntry);\n  } catch (e) {\n    if (isServerError(e) && e.customData.serverCode === 409) {\n      // Server returned a \"FID can not be used\" error.\n      // Generate a new ID next time.\n      await remove(appConfig);\n    } else {\n      // Registration failed. Set FID as not registered.\n      await set(appConfig, {\n        fid: installationEntry.fid,\n        registrationStatus: RequestStatus.NOT_STARTED\n      });\n    }\n    throw e;\n  }\n}\n\n/** Call if FID registration is pending in another request. */\nasync function waitUntilFidRegistration(\n  appConfig: AppConfig\n): Promise<RegisteredInstallationEntry> {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry: InstallationEntry = await updateInstallationRequest(appConfig);\n  while (entry.registrationStatus === RequestStatus.IN_PROGRESS) {\n    // createInstallation request still in progress.\n    await sleep(100);\n\n    entry = await updateInstallationRequest(appConfig);\n  }\n\n  if (entry.registrationStatus === RequestStatus.NOT_STARTED) {\n    // The request timed out or failed in a different call. Try again.\n    const { installationEntry, registrationPromise } =\n      await getInstallationEntry(appConfig);\n\n    if (registrationPromise) {\n      return registrationPromise;\n    } else {\n      // if there is no registrationPromise, entry is registered.\n      return installationEntry as RegisteredInstallationEntry;\n    }\n  }\n\n  return entry;\n}\n\n/**\n * Called only if there is a CreateInstallation request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * CreateInstallation request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateInstallationRequest(\n  appConfig: AppConfig\n): Promise<InstallationEntry> {\n  return update(appConfig, oldEntry => {\n    if (!oldEntry) {\n      throw ERROR_FACTORY.create(ErrorCode.INSTALLATION_NOT_FOUND);\n    }\n    return clearTimedOutRequest(oldEntry);\n  });\n}\n\nfunction clearTimedOutRequest(entry: InstallationEntry): InstallationEntry {\n  if (hasInstallationRequestTimedOut(entry)) {\n    return {\n      fid: entry.fid,\n      registrationStatus: RequestStatus.NOT_STARTED\n    };\n  }\n\n  return entry;\n}\n\nfunction hasInstallationRequestTimedOut(\n  installationEntry: InstallationEntry\n): boolean {\n  return (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS &&\n    installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport {\n  CompletedAuthToken,\n  RegisteredInstallationEntry\n} from '../interfaces/installation-entry';\nimport { PACKAGE_VERSION } from '../util/constants';\nimport {\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeadersWithAuth,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\nimport {\n  FirebaseInstallationsImpl,\n  AppConfig\n} from '../interfaces/installation-impl';\n\nexport async function generateAuthTokenRequest(\n  { appConfig, platformLoggerProvider }: FirebaseInstallationsImpl,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> {\n  const endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);\n\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n\n  // If platform logger exists, add the platform info string to the header.\n  const platformLogger = platformLoggerProvider.getImmediate({\n    optional: true\n  });\n  if (platformLogger) {\n    headers.append('x-firebase-client', platformLogger.getPlatformInfoString());\n  }\n\n  const body = {\n    installation: {\n      sdkVersion: PACKAGE_VERSION\n    }\n  };\n\n  const request: RequestInit = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) {\n    const responseValue: GenerateAuthTokenResponse = await response.json();\n    const completedAuthToken: CompletedAuthToken =\n      extractAuthTokenInfoFromResponse(responseValue);\n    return completedAuthToken;\n  } else {\n    throw await getErrorFromResponse('Generate Auth Token', response);\n  }\n}\n\nfunction getGenerateAuthTokenEndpoint(\n  appConfig: AppConfig,\n  { fid }: RegisteredInstallationEntry\n): string {\n  return `${getInstallationsEndpoint(appConfig)}/${fid}/authTokens:generate`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { generateAuthTokenRequest } from '../functions/generate-auth-token-request';\nimport {\n  AppConfig,\n  FirebaseInstallationsImpl\n} from '../interfaces/installation-impl';\nimport {\n  AuthToken,\n  CompletedAuthToken,\n  InProgressAuthToken,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { PENDING_TIMEOUT_MS, TOKEN_EXPIRATION_BUFFER } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport { sleep } from '../util/sleep';\nimport { remove, set, update } from './idb-manager';\n\n/**\n * Returns a valid authentication token for the installation. Generates a new\n * token if one doesn't exist, is expired or about to expire.\n *\n * Should only be called if the Firebase Installation is registered.\n */\nexport async function refreshAuthToken(\n  installations: FirebaseInstallationsImpl,\n  forceRefresh = false\n): Promise<CompletedAuthToken> {\n  let tokenPromise: Promise<CompletedAuthToken> | undefined;\n  const entry = await update(installations.appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n    }\n\n    const oldAuthToken = oldEntry.authToken;\n    if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {\n      // There is a valid token in the DB.\n      return oldEntry;\n    } else if (oldAuthToken.requestStatus === RequestStatus.IN_PROGRESS) {\n      // There already is a token request in progress.\n      tokenPromise = waitUntilAuthTokenRequest(installations, forceRefresh);\n      return oldEntry;\n    } else {\n      // No token or token expired.\n      if (!navigator.onLine) {\n        throw ERROR_FACTORY.create(ErrorCode.APP_OFFLINE);\n      }\n\n      const inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);\n      tokenPromise = fetchAuthTokenFromServer(installations, inProgressEntry);\n      return inProgressEntry;\n    }\n  });\n\n  const authToken = tokenPromise\n    ? await tokenPromise\n    : (entry.authToken as CompletedAuthToken);\n  return authToken;\n}\n\n/**\n * Call only if FID is registered and Auth Token request is in progress.\n *\n * Waits until the current pending request finishes. If the request times out,\n * tries once in this thread as well.\n */\nasync function waitUntilAuthTokenRequest(\n  installations: FirebaseInstallationsImpl,\n  forceRefresh: boolean\n): Promise<CompletedAuthToken> {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry = await updateAuthTokenRequest(installations.appConfig);\n  while (entry.authToken.requestStatus === RequestStatus.IN_PROGRESS) {\n    // generateAuthToken still in progress.\n    await sleep(100);\n\n    entry = await updateAuthTokenRequest(installations.appConfig);\n  }\n\n  const authToken = entry.authToken;\n  if (authToken.requestStatus === RequestStatus.NOT_STARTED) {\n    // The request timed out or failed in a different call. Try again.\n    return refreshAuthToken(installations, forceRefresh);\n  } else {\n    return authToken;\n  }\n}\n\n/**\n * Called only if there is a GenerateAuthToken request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * GenerateAuthToken request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateAuthTokenRequest(\n  appConfig: AppConfig\n): Promise<RegisteredInstallationEntry> {\n  return update(appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n    }\n\n    const oldAuthToken = oldEntry.authToken;\n    if (hasAuthTokenRequestTimedOut(oldAuthToken)) {\n      return {\n        ...oldEntry,\n        authToken: { requestStatus: RequestStatus.NOT_STARTED }\n      };\n    }\n\n    return oldEntry;\n  });\n}\n\nasync function fetchAuthTokenFromServer(\n  installations: FirebaseInstallationsImpl,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> {\n  try {\n    const authToken = await generateAuthTokenRequest(\n      installations,\n      installationEntry\n    );\n    const updatedInstallationEntry: RegisteredInstallationEntry = {\n      ...installationEntry,\n      authToken\n    };\n    await set(installations.appConfig, updatedInstallationEntry);\n    return authToken;\n  } catch (e) {\n    if (\n      isServerError(e) &&\n      (e.customData.serverCode === 401 || e.customData.serverCode === 404)\n    ) {\n      // Server returned a \"FID not found\" or a \"Invalid authentication\" error.\n      // Generate a new ID next time.\n      await remove(installations.appConfig);\n    } else {\n      const updatedInstallationEntry: RegisteredInstallationEntry = {\n        ...installationEntry,\n        authToken: { requestStatus: RequestStatus.NOT_STARTED }\n      };\n      await set(installations.appConfig, updatedInstallationEntry);\n    }\n    throw e;\n  }\n}\n\nfunction isEntryRegistered(\n  installationEntry: InstallationEntry | undefined\n): installationEntry is RegisteredInstallationEntry {\n  return (\n    installationEntry !== undefined &&\n    installationEntry.registrationStatus === RequestStatus.COMPLETED\n  );\n}\n\nfunction isAuthTokenValid(authToken: AuthToken): boolean {\n  return (\n    authToken.requestStatus === RequestStatus.COMPLETED &&\n    !isAuthTokenExpired(authToken)\n  );\n}\n\nfunction isAuthTokenExpired(authToken: CompletedAuthToken): boolean {\n  const now = Date.now();\n  return (\n    now < authToken.creationTime ||\n    authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER\n  );\n}\n\n/** Returns an updated InstallationEntry with an InProgressAuthToken. */\nfunction makeAuthTokenRequestInProgressEntry(\n  oldEntry: RegisteredInstallationEntry\n): RegisteredInstallationEntry {\n  const inProgressAuthToken: InProgressAuthToken = {\n    requestStatus: RequestStatus.IN_PROGRESS,\n    requestTime: Date.now()\n  };\n  return {\n    ...oldEntry,\n    authToken: inProgressAuthToken\n  };\n}\n\nfunction hasAuthTokenRequestTimedOut(authToken: AuthToken): boolean {\n  return (\n    authToken.requestStatus === RequestStatus.IN_PROGRESS &&\n    authToken.requestTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getInstallationEntry } from '../helpers/get-installation-entry';\nimport { refreshAuthToken } from '../helpers/refresh-auth-token';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * Creates a Firebase Installation if there isn't one for the app and\n * returns the Installation ID.\n * @param installations - The `Installations` instance.\n *\n * @public\n */\nexport async function getId(installations: Installations): Promise<string> {\n  const installationsImpl = installations as FirebaseInstallationsImpl;\n  const { installationEntry, registrationPromise } = await getInstallationEntry(\n    installationsImpl.appConfig\n  );\n\n  if (registrationPromise) {\n    registrationPromise.catch(console.error);\n  } else {\n    // If the installation is already registered, update the authentication\n    // token if needed.\n    refreshAuthToken(installationsImpl).catch(console.error);\n  }\n\n  return installationEntry.fid;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getInstallationEntry } from '../helpers/get-installation-entry';\nimport { refreshAuthToken } from '../helpers/refresh-auth-token';\nimport {\n  FirebaseInstallationsImpl,\n  AppConfig\n} from '../interfaces/installation-impl';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * Returns a Firebase Installations auth token, identifying the current\n * Firebase Installation.\n * @param installations - The `Installations` instance.\n * @param forceRefresh - Force refresh regardless of token expiration.\n *\n * @public\n */\nexport async function getToken(\n  installations: Installations,\n  forceRefresh = false\n): Promise<string> {\n  const installationsImpl = installations as FirebaseInstallationsImpl;\n  await completeInstallationRegistration(installationsImpl.appConfig);\n\n  // At this point we either have a Registered Installation in the DB, or we've\n  // already thrown an error.\n  const authToken = await refreshAuthToken(installationsImpl, forceRefresh);\n  return authToken.token;\n}\n\nasync function completeInstallationRegistration(\n  appConfig: AppConfig\n): Promise<void> {\n  const { registrationPromise } = await getInstallationEntry(appConfig);\n\n  if (registrationPromise) {\n    // A createInstallation request is in progress. Wait until it finishes.\n    await registrationPromise;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfig } from '../interfaces/installation-impl';\nimport { RegisteredInstallationEntry } from '../interfaces/installation-entry';\nimport {\n  getErrorFromResponse,\n  getHeadersWithAuth,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\n\nexport async function deleteInstallationRequest(\n  appConfig: AppConfig,\n  installationEntry: RegisteredInstallationEntry\n): Promise<void> {\n  const endpoint = getDeleteEndpoint(appConfig, installationEntry);\n\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n  const request: RequestInit = {\n    method: 'DELETE',\n    headers\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (!response.ok) {\n    throw await getErrorFromResponse('Delete Installation', response);\n  }\n}\n\nfunction getDeleteEndpoint(\n  appConfig: AppConfig,\n  { fid }: RegisteredInstallationEntry\n): string {\n  return `${getInstallationsEndpoint(appConfig)}/${fid}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deleteInstallationRequest } from '../functions/delete-installation-request';\nimport { remove, update } from '../helpers/idb-manager';\nimport { RequestStatus } from '../interfaces/installation-entry';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * Deletes the Firebase Installation and all associated data.\n * @param installations - The `Installations` instance.\n *\n * @public\n */\nexport async function deleteInstallations(\n  installations: Installations\n): Promise<void> {\n  const { appConfig } = installations as FirebaseInstallationsImpl;\n\n  const entry = await update(appConfig, oldEntry => {\n    if (oldEntry && oldEntry.registrationStatus === RequestStatus.NOT_STARTED) {\n      // Delete the unregistered entry without sending a deleteInstallation request.\n      return undefined;\n    }\n    return oldEntry;\n  });\n\n  if (entry) {\n    if (entry.registrationStatus === RequestStatus.IN_PROGRESS) {\n      // Can't delete while trying to register.\n      throw ERROR_FACTORY.create(ErrorCode.DELETE_PENDING_REGISTRATION);\n    } else if (entry.registrationStatus === RequestStatus.COMPLETED) {\n      if (!navigator.onLine) {\n        throw ERROR_FACTORY.create(ErrorCode.APP_OFFLINE);\n      } else {\n        await deleteInstallationRequest(appConfig, entry);\n        await remove(appConfig);\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { addCallback, removeCallback } from '../helpers/fid-changed';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * An user defined callback function that gets called when Installations ID changes.\n *\n * @public\n */\nexport type IdChangeCallbackFn = (installationId: string) => void;\n/**\n * Unsubscribe a callback function previously added via {@link #IdChangeCallbackFn}.\n *\n * @public\n */\nexport type IdChangeUnsubscribeFn = () => void;\n\n/**\n * Sets a new callback that will get called when Installation ID changes.\n * Returns an unsubscribe function that will remove the callback when called.\n * @param installations - The `Installations` instance.\n * @param callback - The callback function that is invoked when FID changes.\n * @returns A function that can be called to unsubscribe.\n *\n * @public\n */\nexport function onIdChange(\n  installations: Installations,\n  callback: IdChangeCallbackFn\n): IdChangeUnsubscribeFn {\n  const { appConfig } = installations as FirebaseInstallationsImpl;\n\n  addCallback(appConfig, callback);\n  return () => {\n    removeCallback(appConfig, callback);\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, getApp, _getProvider } from '@firebase/app';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * Returns an instance of {@link Installations} associated with the given\n * {@link @firebase/app#FirebaseApp} instance.\n * @param app - The {@link @firebase/app#FirebaseApp} instance.\n *\n * @public\n */\nexport function getInstallations(app: FirebaseApp = getApp()): Installations {\n  const installationsImpl = _getProvider(app, 'installations').getImmediate();\n  return installationsImpl;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app';\nimport { FirebaseError } from '@firebase/util';\nimport { AppConfig } from '../interfaces/installation-impl';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nexport function extractAppConfig(app: FirebaseApp): AppConfig {\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration');\n  }\n\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  }\n\n  // Required app config keys\n  const configKeys: Array<keyof FirebaseOptions> = [\n    'projectId',\n    'apiKey',\n    'appId'\n  ];\n\n  for (const keyName of configKeys) {\n    if (!app.options[keyName]) {\n      throw getMissingValueError(keyName);\n    }\n  }\n\n  return {\n    appName: app.name,\n    projectId: app.options.projectId!,\n    apiKey: app.options.apiKey!,\n    appId: app.options.appId!\n  };\n}\n\nfunction getMissingValueError(valueName: string): FirebaseError {\n  return ERROR_FACTORY.create(ErrorCode.MISSING_APP_CONFIG_VALUES, {\n    valueName\n  });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _registerComponent, _getProvider } from '@firebase/app';\nimport {\n  Component,\n  ComponentType,\n  InstanceFactory,\n  ComponentContainer\n} from '@firebase/component';\nimport { getId, getToken } from '../api/index';\nimport { _FirebaseInstallationsInternal } from '../interfaces/public-types';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { extractAppConfig } from '../helpers/extract-app-config';\n\nconst INSTALLATIONS_NAME = 'installations';\nconst INSTALLATIONS_NAME_INTERNAL = 'installations-internal';\n\nconst publicFactory: InstanceFactory<'installations'> = (\n  container: ComponentContainer\n) => {\n  const app = container.getProvider('app').getImmediate();\n  // Throws if app isn't configured properly.\n  const appConfig = extractAppConfig(app);\n  const platformLoggerProvider = _getProvider(app, 'platform-logger');\n\n  const installationsImpl: FirebaseInstallationsImpl = {\n    app,\n    appConfig,\n    platformLoggerProvider,\n    _delete: () => Promise.resolve()\n  };\n  return installationsImpl;\n};\n\nconst internalFactory: InstanceFactory<'installations-internal'> = (\n  container: ComponentContainer\n) => {\n  const app = container.getProvider('app').getImmediate();\n  // Internal FIS instance relies on public FIS instance.\n  const installations = _getProvider(app, INSTALLATIONS_NAME).getImmediate();\n\n  const installationsInternal: _FirebaseInstallationsInternal = {\n    getId: () => getId(installations),\n    getToken: (forceRefresh?: boolean) => getToken(installations, forceRefresh)\n  };\n  return installationsInternal;\n};\n\nexport function registerInstallations(): void {\n  _registerComponent(\n    new Component(INSTALLATIONS_NAME, publicFactory, ComponentType.PUBLIC)\n  );\n  _registerComponent(\n    new Component(\n      INSTALLATIONS_NAME_INTERNAL,\n      internalFactory,\n      ComponentType.PRIVATE\n    )\n  );\n}\n","/**\n * Firebase Installations\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerInstallations } from './functions/config';\nimport { registerVersion } from '@firebase/app';\nimport { name, version } from '../package.json';\n\nexport * from './api';\nexport * from './interfaces/public-types';\n\nregisterInstallations();\nregisterVersion(name, version);\n// BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\nregisterVersion(name, version, '__BUILD_TARGET__');\n"]},"metadata":{},"sourceType":"module"}